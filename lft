#!/home/jdh4/bin/terminal-env/bin/python -u

# post issues to https://github.com/jdh4/lft
# or write to halverson@princeton.edu

# standard library
import os
from os.path import isdir
import sys
import subprocess
from subprocess import PIPE as sPIPE
from datetime import datetime
from time import time
from socket import gethostname

# conda environment
from blessed import Terminal

# self-written code
from panes import utils
from panes.utils import divider
from panes import dossier

######################################
## evaluate command-line parameters ##
######################################
def print_help():
  print("")
  print("lft is looking for trouble. Example usage:")
  print("     $ lft aturing")
  print("")
  print("Options:")
  print("     -v  Verbose output (show packages and more jobs)")
  print("     -s  Show sponsor")
  print("     -d  Compute the size of /home using du -sh")
  print("     -h  Show this help menu")
  print("")
  sys.exit(0)

if (len(sys.argv) == 1 or len(sys.argv) > 5):
  print("")
  print("ERROR: Wrong number of command-line parameters.")
  print_help()
if ('-h' in sys.argv or '--help' in sys.argv):
  print_help()
verbose = True if ('-v' in sys.argv) else False
spon    = True if ('-s' in sys.argv) else False
disk    = True if ('-d' in sys.argv) else False

###############################
## if __name__ == "__main__" ##
###############################

# check terminal size
term = Terminal()
width = 85
gutter = ' '
if (term.width < width):
  print(f"Terminal width too small ({term.width} < {width}). Exiting ...")
  sys.exit(0)

# translate hostname (e.g., della5.princeton.edu -> della)
hostname = gethostname().strip().lower()
if (hostname not in utils.known_hosts):
  print(f"{hostname} is unknown (see panes/utils.py). Exiting ...")
  sys.exit(0)
host = utils.known_hosts[hostname]

# ldapsearch (causes code to seemingly hang for 1-2 seconds at start)
username = sys.argv[1].strip()
person = dossier.ldap_plus([username])
netid = person[1][9]
if netid is None:
  print("")
  print(f"{username} not found in Princeton LDAP (or ldapsearch timed out). Exiting ...")
  print("")
  sys.exit(0)

# check for existence and permissions of /home
home = f"/home/{netid}"
if isdir(home):
  home_exists = True
  if utils.is_rx(home):
    home_rx = True
  else:
    home_rx = False
else:
  home_exists = False
  home_rx = False

# clear terminal and print header
print(term.home + term.clear)
message = f"{gutter}looking for trouble"
now = datetime.today().strftime('%-I:%M %p (%b %-d)')
num_spaces = width - len(message) - len(now) - len(gutter)
print("=" * width)
print(f"{message}{' ' * num_spaces}{now}")
print("=" * width)

####################################
## print LDAP info about the user ##
####################################

# netid, name, groups, dept, position
p = person[1]
if p[9]:
 if netid == username:
   print("   NetID:", term.bold(p[9]))
 else:
   print(f"   NetID: {term.bold(p[9])} ({term.bold}{term.red}{username} is alias{term.normal})")
if p[0]: print("    Name:", p[0])
print("  Groups:")  # completed below
print("    Dept:", p[1]) if p[1] else print("    Dept: unknown")
print("Position:", p[3]) if p[3] else print("Position: unknown")

# user last active
if isdir(home):
  print(utils.last_active(netid))
else:
  print("  Active: N/A")
if spon: print(" Sponsor:")  # completed below

######################
## home directories ##
######################
import csv
flnm = "/home/jdh4/bin/cron/combined_ls.csv"
home_dirs = []
if os.path.isfile(flnm):
  with open(flnm, mode='r') as csv_file:
    csv_reader = csv.DictReader(csv_file)
    next(csv_reader)
    for row in csv_reader:
      if row["netid"] == netid:
        home_dirs = [hdir for hdir in list(row.values())[1:] if hdir != '']
        break
if home_dirs:
  frmt = " @ %-I:%M%p"
  mtime = datetime.fromtimestamp(os.stat(flnm).st_mtime).strftime(frmt)
  with term.location(65, 4):
    print("/home" + mtime)
    for hdir in sorted(home_dirs):
      pre = "*" if hdir in host else " "
      print(term.move_x(67) + pre + hdir)

###############################
## .bashrc and .bash_profile ##
###############################
from panes import startup_scripts as ss

evars = {}
evars['miniconda'] = False
evars['anaconda'] = False
evars['pythonpath'] = (False, None)
evars['rlibs'] = (False, None)
evars['rlibsuser'] = (False, None)

divider(f"{term.bold}Environment{term.normal}", '', gutter, width)
if not home_exists:
  print(f"{gutter}{home} does not exist on {host}")
elif home_exists and not home_rx:
  print(f"{gutter}{home} is private")
else:
  rc = ss.analyze_startup_script('.bashrc', utils.bashrc_default, utils.bashrc_default8, evars, netid)
  bp = ss.analyze_startup_script('.bash_profile', utils.bash_profile_default, utils.bash_profile_default8, evars, netid)
  if not rc[2] and not bp[2]:
    print(f"{gutter}      ~/.bashrc: {rc[3]}")
    print(f"{gutter}~/.bash_profile: {bp[3]}")
  else:
    ss.print_with_modules(*rc, term, gutter, verbose)
    ss.print_with_modules(*bp, term, gutter, verbose)

#################
## filesystems ##
#################
from panes import filesystems as fs
_ = fs.filesystems(term, gutter, host, netid, width, spon, home_exists, home_rx)

############
## groups ##
############
# note that the output of the groups command can vary with cluster
cmd = f"groups {netid}"
output = subprocess.run(cmd, capture_output=True, shell=True, timeout=5)
lines = output.stdout.decode("utf-8").split('\n')
# jdh4 : cses quijote
# groups: aturing: no such user
if output.returncode != 0 or "no such user" in lines[0]:
  grps = ""
else:
  grps = lines[0].split(':')[-1].split()
  if len(grps) > 3:
    grps = ', '.join(grps[:3]) + ', ...'
  else:
    grps = ', '.join(grps)
with term.location():
  print(term.move_xy(2, 6) + "Groups: " + grps)

###############################
## login shell and .modulerc ##
###############################
if home_exists:
  cmd = f"getent passwd {netid}"
  try:
    output = subprocess.run(cmd, capture_output=True, shell=True, timeout=5)
  except:
    pass
  else:
    line = output.stdout.decode("utf-8")
    if line.count(":") > 0:
      shell = line.split(":")[-1].strip()
      red = ["/bin/csh", "/bin/zsh", "/bin/tcsh", "/usr/bin/zsh", "/bin/sh", "bin/ksh"]
      if shell in red:
        print(f"{gutter}    login shell: {term.bold}{term.red}{shell}{term.normal}")
      if home_rx and os.path.isfile(f"/home/{netid}/.cshrc"):
        print(f"{gutter}{term.bold}{term.red}~/.cshrc exists{term.normal}")
  if home_rx and os.path.isfile(f"/home/{netid}/.modulerc"):
    print(f"{gutter}{term.bold}{term.red}~/.modulerc exists{term.normal}")

####################
## sponsor_report ##
####################
if spon:
  from panes import sponsor as sp
  sponsor_full_name, sponsor = sp.get_sponsor(netid)
  if sponsor_full_name and sponsor:
    with term.location():
      print(term.move_xy(1, 10) + f"Sponsor: {sponsor_full_name} ({sponsor})")

############
## python ##
############
from panes import python as py
if home_exists and home_rx:
  py.python_packages(netid, evars, term, gutter, width, verbose)

#################
## R and julia ##
#################
from panes import r_and_julia as rj

if home_exists and home_rx:
  rj.r_packages(netid, evars, term, gutter, width, verbose)
  rj.julia_packages(netid, term, gutter, width, verbose)

############
## matlab ##
############
opath = f"{home}/ondemand/data/sys/dashboard/batch_connect/sys/matlab/output"
ondemand = isdir(opath)
path = home + '/.matlab'
if home_exists and home_rx and ((isdir(path) and utils.is_rx(path)) or ondemand):
  divider(term.bold("MATLAB"), "", gutter, width)
  if isdir(path) and utils.is_rx(path):
    versions = sorted(os.listdir(path))
    if versions: print(gutter + " ".join([v for v in versions if "R20" in v]))
  if ondemand:
    utils.ondemand_last_used("MATLAB", opath, gutter)
    lpath = f"/home/{netid}/.local/share/matlab"
    if isdir(lpath):
      print(f"{gutter}{lpath} exists")

###########
## stata ##
###########
opath = f"{home}/ondemand/data/sys/dashboard/batch_connect/sys/xstata/output"
ondemand = isdir(opath)
versions = [f"Stata {i}" for i in range(12, 18) if isdir(f"{home}/.stata{i}")]
if home_exists and home_rx and (versions or ondemand):
  divider(term.bold("Stata"), "", gutter, width)
  if versions: print(gutter + ", ".join(sorted(versions)))
  if ondemand:
    utils.ondemand_last_used("Stata", opath, gutter)
    lpath = f"/home/{netid}/.local/share/stata"
    if isdir(lpath):
      print(f"{gutter}{lpath} exists")

###########################
## current and past jobs ##
###########################
from panes import jobs as jb

if home_exists and host != "tigressdata":
  shares = jb.sshare(term, gutter, host, netid)
  jobs = jb.squeue(gutter, host, netid)
  if shares or jobs:
    divider(f"{term.bold}Jobs{term.normal}", "", gutter, width)
    for share in shares:
      print(share)
    if jobs: print(jobs)
  lines = jb.sacct(term, gutter, verbose, host, netid)
  if lines: print('-' * width)
  for line in lines:
    print(line)

###############
## reminders ##
###############
from panes import reminders as rms

downtime = rms.previous_and_next_downtime_dates(term, gutter, verbose)
reservations = rms.get_reservations(term, gutter, days_away=10) if host == "adroit" else []
reminders = rms.get_reminders(term, gutter, "holidays.csv", host, days_away=10)
reminders.extend(rms.get_reminders(term, gutter, "rc_workshops.csv", host, days_away=3))

if downtime or reservations or reminders:
  divider(f"{term.bold}Reminders{term.normal}", "", gutter, width)
  if downtime:
    print(downtime)
  if reservations:
    for r in reservations:
      print(r)
  if reminders:
    for r in reminders:
      print(r)

###################
## size of /home ##
###################
if home_exists and home_rx and disk:
  try:
    cmd = "du -sh /home/" + netid + " 2>/dev/null"
    output = subprocess.run(cmd, capture_output=True, shell=True, timeout=15)
    lines = output.stdout.decode("utf-8").split('\n')
    divider('size of /home on ' + host, '', gutter, width)
    sz = lines[0].split('\t')[0]
    print(f"{gutter}{sz}")
  except subprocess.TimeoutExpired:
    divider(f"{term.bold}size of /home{term.normal}", "", gutter, width)
    print(f"{gutter}du timed out")
  except:
    divider(f"{term.bold}size of /home{term.normal}", "", gutter, width)
    print(f"{gutter}du failed")

print("")
print("")
